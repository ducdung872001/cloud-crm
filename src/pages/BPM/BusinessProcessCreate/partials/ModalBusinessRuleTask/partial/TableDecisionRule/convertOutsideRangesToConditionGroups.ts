/**
 * T√≠nh to√°n c√°c kho·∫£ng gi√° tr·ªã n·∫±m ngo√†i t·∫≠p h·ª£p c√°c ƒëi·ªÅu ki·ªán s·ªë h·ªçc.
 *
 * üëâ Input: ConditionGroup[] = m·∫£ng c√°c nh√≥m ƒëi·ªÅu ki·ªán, m·ªói nh√≥m g·ªìm 1 ho·∫∑c nhi·ªÅu ƒëi·ªÅu ki·ªán.
 * - C√°c nh√≥m (m·∫£ng c·∫•p 1) ƒë∆∞·ª£c k·∫øt h·ª£p b·∫±ng ph√©p HO·∫∂C (OR).
 * - C√°c ƒëi·ªÅu ki·ªán trong m·ªói nh√≥m (m·∫£ng c·∫•p 2) ƒë∆∞·ª£c k·∫øt h·ª£p b·∫±ng ph√©p V√Ä (AND).
 * - T·∫•t c·∫£ ƒëi·ªÅu ki·ªán ph·∫£i √°p d·ª•ng tr√™n c√πng m·ªôt tr∆∞·ªùng (parameter), v√≠ d·ª•: "the_chap".
 * - H·ªó tr·ª£ c√°c to√°n t·ª≠:
 *     - EQUAL (b·∫±ng)
 *     - NOT_EQUAL (kh√°c)
 *     - GREATER_THAN (l·ªõn h∆°n)
 *     - GREATER_THAN_OR_EQUAL (l·ªõn h∆°n ho·∫∑c b·∫±ng)
 *     - LESS_THAN (nh·ªè h∆°n)
 *     - LESS_THAN_OR_EQUAL (nh·ªè h∆°n ho·∫∑c b·∫±ng)
 *
 * üß† Minh ho·∫° t·ªï h·ª£p ƒëi·ªÅu ki·ªán:
 * Input = [
 *   [A, B],     // A AND B
 *   [C],        // C
 *   [D, E]      // D AND E
 * ]
 * ‚Üí ƒêi·ªÅu ki·ªán t·ªïng: (A AND B) OR (C) OR (D AND E)
 * ‚Üí H√†m s·∫Ω tr·∫£ ra c√°c kho·∫£ng gi√° tr·ªã **n·∫±m ngo√†i** ƒëi·ªÅu ki·ªán t·ªïng n√†y.
 *
 * üëâ Output:
 * - M·∫£ng c√°c nh√≥m ƒëi·ªÅu ki·ªán (k·∫øt h·ª£p OR gi·ªØa nh√≥m, AND trong nh√≥m) ƒë·∫°i di·ªán cho c√°c kho·∫£ng gi√° tr·ªã ngo√†i (outside ranges).
 * - Tr·∫£ v·ªÅ `false` n·∫øu:
 *    a) Input r·ªóng
 *    b) C√°c ƒëi·ªÅu ki·ªán ƒë√£ bao ph·ªß to√†n b·ªô tr·ª•c s·ªë th·ª±c
 *    c) Kh√¥ng c√≤n kho·∫£ng outside h·ª£p l·ªá n√†o ƒë·ªÉ tr·∫£ v·ªÅ
 *
 * üß™ V√≠ d·ª•:
 * Input = [
 *   [ {parameter: "x", operator: "EQUAL", value: 5} ],
 *   [ {parameter: "x", operator: "GREATER_THAN_OR_EQUAL", value: 10}, {operator: "LESS_THAN_OR_EQUAL", value: 20} ]
 * ]
 * ‚Üí ƒêi·ªÅu ki·ªán t·ªïng: (x == 5) OR (10 <= x <= 20)
 * ‚Üí Output: [
 *     [ {parameter: "x", operator: "LESS_THAN", value: 5} ],
 *     [ {parameter: "x", operator: "GREATER_THAN", value: 5}, {operator: "LESS_THAN", value: 10} ],
 *     [ {parameter: "x", operator: "GREATER_THAN", value: 20} ]
 *   ]
 */

export type Operator = "EQUAL" | "NOT_EQUAL" | "GREATER_THAN" | "LESS_THAN" | "GREATER_THAN_OR_EQUAL" | "LESS_THAN_OR_EQUAL";

export interface Condition {
  parameter: string;
  operator: Operator;
  value: number;
}

export type ConditionGroup = Condition[];

interface Range {
  start: number;
  end: number;
  excludeStart?: boolean;
  excludeEnd?: boolean;
  originOperator?: string; // L∆∞u tr·ªØ to√°n t·ª≠ g·ªëc ƒë·ªÉ s·ª≠ d·ª•ng khi chuy·ªÉn ƒë·ªïi l·∫°i th√†nh ƒëi·ªÅu ki·ªán
}

function extractRangeFromConditions(group: ConditionGroup): Range[] {
  const equalConditions = group.filter((c) => c.operator === "EQUAL");
  const notEqualConditions = group.filter((c) => c.operator === "NOT_EQUAL");

  if (equalConditions.length === 1) {
    const v = equalConditions[0].value;
    return [{ start: v, end: v, originOperator: equalConditions[0].operator }];
  }

  let start = -Infinity;
  let end = Infinity;
  let excludeStart = false;
  let excludeEnd = false;
  let originOperator = "";

  for (const condition of group) {
    originOperator = condition.operator;
    switch (condition.operator) {
      case "GREATER_THAN":
        start = Math.max(start, condition.value);
        excludeStart = true;
        break;
      case "GREATER_THAN_OR_EQUAL":
        start = Math.max(start, condition.value);
        excludeStart = false;
        break;
      case "LESS_THAN":
        end = Math.min(end, condition.value);
        excludeEnd = true;
        break;
      case "LESS_THAN_OR_EQUAL":
        end = Math.min(end, condition.value);
        excludeEnd = false;
        break;
      case "NOT_EQUAL":
        start = Math.max(start, condition.value);
        end = Math.min(end, condition.value);
        excludeEnd = false;
        excludeStart = false;
        break;
    }
  }

  const mainRange = start <= end ? [{ start, end, excludeStart, excludeEnd, originOperator }] : [];

  const notEqualRanges: Range[] = notEqualConditions.map((c) => ({
    start: c.value,
    end: c.value,
    excludeStart: false,
    excludeEnd: false,
    originOperator: c.operator,
  }));

  return [...mainRange, ...notEqualRanges];
}

function mergeRanges(ranges: Range[]): Range[] {
  const sorted = ranges.filter((r) => r.start <= r.end).sort((a, b) => a.start - b.start || Number(a.excludeStart) - Number(b.excludeStart));

  console.log("Alias: mergeRanges - sorted ranges:", sorted);

  const merged: Range[] = [];

  for (const range of sorted) {
    if (merged.length === 0) {
      merged.push({ ...range });
      continue;
    }

    const last = merged[merged.length - 1];

    const canMerge = last.end > range.start || (last.end === range.start && (!last.excludeEnd || !range.excludeStart));

    if (canMerge) {
      last.end = Math.max(last.end, range.end);
      last.excludeEnd = last.end === range.end ? last.excludeEnd && range.excludeEnd : last.end < range.end ? range.excludeEnd : last.excludeEnd;
    } else {
      merged.push({ ...range });
    }
  }

  return merged;
}

function invertRanges(ranges: Range[], specialEqual?: any): Range[] {
  // Ham n√†y s·∫Ω l·∫•y c√°c kho·∫£ng ƒë√£ cho v√† t·∫°o ra c√°c kho·∫£ng n·∫±m ngo√†i ch√∫ng.
  const result: Range[] = [];
  let current = -Infinity;
  let originOperator = "";
  let originOperatorOfStartValue = "";
  let excludeStartOfStartValue = false;

  for (const range of ranges) {
    if (range.start == range.end && !range.excludeStart && !range.excludeEnd && range.originOperator === "NOT_EQUAL") {
      // Tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát: n·∫øu kho·∫£ng l√† m·ªôt ƒëi·ªÉm ƒë∆°n v√† l√† NOT_EQUAL => kho·∫£ng ngo√†i nghƒ©a l√† ch√≠nh ƒëi·ªÉm ƒë√≥
      result.push({
        start: range.start,
        end: range.end,
        excludeStart: false,
        excludeEnd: false,
        originOperator: range.originOperator,
      });
    } else {
      if (current < range.start || (current === range.start && range.excludeStart)) {
        // console.log("Alias: invertRanges - range:", range);
        // console.log("Alias: invertRanges - originOperatorOfStartValue:", originOperatorOfStartValue);
        // console.log("Alias: invertRanges - excludeStartOfStartValue:", excludeStartOfStartValue);

        result.push({
          start: current,
          end: range.start,
          excludeStart: originOperatorOfStartValue.includes("EQUAL") ? true : excludeStartOfStartValue,
          excludeEnd: range.originOperator.includes("EQUAL") ? true : !range.excludeStart,
          originOperator: range.originOperator,
        });
      }
    }
    current = range.end;
    originOperatorOfStartValue = range.originOperator;
    excludeStartOfStartValue = !range?.excludeEnd;
    originOperator = range.originOperator;
  }

  // Tr∆∞·ªùng h·ª£p kh√¥ng c√≥ ƒëi·ªÉm ch·∫∑n cu·ªëi c√πng, nghƒ©a l√† kho·∫£ng ngo√†i t·ª´ ƒëi·ªÉm cu·ªëi c·ªßa kho·∫£ng ƒë√£ cho ƒë·∫øn v√¥ c·ª±c
  if (current < Infinity) {
    result.push({
      start: current,
      end: Infinity,
      excludeStart: originOperator.includes("EQUAL") ? true : false,
      excludeEnd: false,
      originOperator: originOperator,
    });
  }

  // Filter k·∫øt qu·∫£ nh∆∞ c≈©
  const filtered = result.filter((r) => r.start < r.end || (r.start === r.end && (!r.excludeStart || !r.excludeEnd)));
  // Ki·ªÉm tra c√≥ ch·ª©a specialEqual trong b·∫•t k·ª≥ kho·∫£ng n√†o sau filter (ƒë√¢y l√† tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát c√≥ 1 h√†ng c√≥ ƒëi·ªÅu ki·ªán NOT_EQUAL)
  // Ki·ªÉm tra xem specialEqual c√≥ n·∫±m trong b·∫•t k·ª≥ kho·∫£ng n√†o hay kh√¥ng, n·∫øu c√≥ th√¨ tr·∫£ v·ªÅ ƒë√∫ng specialEqual, n·∫øu kh√¥ng kho·∫£ng n√†o ch·ª©a specialEqual th√¨ l√† m√¢u thu·∫´n gi·ªØa c√°c ƒëi·ªÅu ki·ªán-> tr·∫£ v·ªÅ m·∫£ng r·ªóng.
  // v√¨ khi c√≥ 1 ƒëi·ªÅu ki·ªán NOT_EQUAL ·ªü input th√¨ ƒëi·ªÅu ki·ªán ti√™n quy·∫øt c·ªßa output (ngh·ªãch ƒë·∫£o-kho·∫£ng ngo√†i) l√† ph·∫£i c√≥ ƒëi·ªÅu ki·ªán EQUAL v·ªõi gi√° tr·ªã specialEqual
  let containsSpecialEqual = false;
  if (typeof specialEqual === "number") {
    containsSpecialEqual = filtered.some((r) => {
      // Tr∆∞·ªùng h·ª£p n·∫±m trong kho·∫£ng
      if (r.start < specialEqual && specialEqual < r.end) return true;
      // Tr∆∞·ªùng h·ª£p specialEqual l√† ƒë·∫ßu m√∫t
      if (r.start === specialEqual && !r.excludeStart) return true;
      if (r.end === specialEqual && !r.excludeEnd) return true;
      return false;
    });

    if (containsSpecialEqual) {
      return [
        {
          start: specialEqual,
          end: specialEqual,
          excludeStart: false,
          excludeEnd: false,
          originOperator: "NOT_EQUAL",
        },
      ];
    } else {
      return [];
    }
  } else {
    return filtered;
  }
}

function rangeToConditionGroup(range: Range, parameter: string): ConditionGroup {
  // Ham n√†y s·∫Ω chuy·ªÉn ƒë·ªïi m·ªôt kho·∫£ng gi√° tr·ªã th√†nh m·ªôt nh√≥m ƒëi·ªÅu ki·ªán.
  const group: ConditionGroup = [];

  if (range.start === range.end && !range.excludeStart && !range.excludeEnd) {
    group.push({
      parameter,
      operator: "EQUAL",
      value: range.start,
    });
  } else if (range.start === range.end) {
    group.push({
      parameter,
      operator: "NOT_EQUAL",
      value: range.start,
    });
  } else if (range.start && range.end === Infinity && range.originOperator === "LESS_THAN") {
    group.push({
      parameter,
      operator: "GREATER_THAN_OR_EQUAL",
      value: range.start,
    });
  } else {
    if (range.start !== -Infinity) {
      group.push({
        parameter,
        operator: range.excludeStart ? "GREATER_THAN" : "GREATER_THAN_OR_EQUAL",
        value: range.start,
      });
    }
    if (range.end !== Infinity) {
      group.push({
        parameter,
        operator: range.excludeEnd ? "LESS_THAN" : "LESS_THAN_OR_EQUAL",
        value: range.end,
      });
    }
  }

  return group;
}

export function convertOutsideRangesToConditionGroups(inputGroups: ConditionGroup[]): ConditionGroup[] | false {
  if (inputGroups.length === 0) {
    console.log("‚õî Kh√¥ng c√≥ ƒëi·ªÅu ki·ªán ƒë·∫ßu v√†o n√†o, kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã n·∫±m ngo√†i.");
    return false;
  }

  const allParameter = inputGroups.flat().map((c) => c.parameter);

  const uniqueParameters = [...new Set(allParameter)];

  if (uniqueParameters.length !== 1) {
    throw new Error("Ch·ªâ h·ªó tr·ª£ m·ªôt parameter duy nh·∫•t t·∫°i m·ªôt th·ªùi ƒëi·ªÉm.");
  }

  const parameter = uniqueParameters[0];

  // ‚úÖ X·ª≠ l√Ω ƒë·∫∑c bi·ªát: n·∫øu ch·ªâ c√≥ 1 ƒëi·ªÅu ki·ªán NOT_EQUAL th√¨ ƒë·ªëi ngh·ªãch l√† EQUAL
  if (inputGroups.length === 1 && inputGroups[0].length === 1 && inputGroups[0][0].operator === "NOT_EQUAL") {
    const cond = inputGroups[0][0];
    return [[{ parameter: cond.parameter, operator: "EQUAL", value: cond.value }]];
  }

  // ‚úÖ X·ª≠ l√Ω ƒë·∫∑c bi·ªát: n·∫øu trong t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·∫•p 2 c·ªßa inputGroups n·∫øu c√≥ 2 ƒëi·ªÅu ki·ªán NOT_EQUAL v√† EQUAL n√†o c√≥ c√πng value th√¨ tr·∫£ v·ªÅ false
  const equalConditions = inputGroups.flat().filter((c) => c.operator === "EQUAL");
  const notEqualConditions = inputGroups.flat().filter((c) => c.operator === "NOT_EQUAL");
  if (equalConditions.length > 0 && notEqualConditions.length > 0) {
    const hasConflict = equalConditions.some((e) => notEqualConditions.some((n) => n.value === e.value));
    if (hasConflict) {
      console.log("‚õî C√≥ m√¢u thu·∫´n gi·ªØa c√°c ƒëi·ªÅu ki·ªán EQUAL v√† NOT_EQUAL.");
      return false;
    }
  }

  let specialEqual: any = null;
  // ‚úÖ X·ª≠ l√Ω ƒë·∫∑c bi·ªát: n·∫øu trong t·∫•t c·∫£ c√°c ph·∫ßn t·ª≠ c·∫•p 2 c·ªßa inputGroups n·∫øu c√≥ 2 ƒëi·ªÅu ki·ªán NOT_EQUAL tr·ªü l√™n th√¨ ki·ªÉm tra th√™m
  if (notEqualConditions.length > 1) {
    // N·∫øu value c·ªßa c√°c ƒëi·ªÅu ki·ªán NOT_EQUAL b·∫±ng nhau th√¨ tr·∫£ v·ªÅ EQUAL
    if (notEqualConditions.every((c, _, arr) => c.value === arr[0].value)) {
      specialEqual = notEqualConditions[0].value;
    } else {
      console.log("‚õî Kh√¥ng th·ªÉ x√°c ƒë·ªãnh gi√° tr·ªã n·∫±m ngo√†i khi c√≥ nhi·ªÅu ƒëi·ªÅu ki·ªán NOT_EQUAL.");
      return false;
    }
  }

  // ‚úÖ X·ª≠ l√Ω ƒë·∫∑c bi·ªát: n·∫øu c√≥ 1 ƒëi·ªÅu ki·ªán NOT_EQUAL trong nh√≥m inputGroups
  if (inputGroups.some((group) => group.length === 1 && group[0].operator === "NOT_EQUAL")) {
    //X√°c ƒë·ªãnh ƒëi·ªÅu ki·ªán NOT_EQUAL v√† tr·∫£ v·ªÅ EQUAL
    const cond = inputGroups.find((group) => group.length === 1 && group[0].operator === "NOT_EQUAL")[0];
    specialEqual = cond.value;
  }

  const ranges = inputGroups.map((group) => extractRangeFromConditions(group)).flat();
  const merged = mergeRanges(ranges);

  const outsideRanges = invertRanges(merged, specialEqual);

  console.log("Alias: convertOutsideRangesToConditionGroups - outsideRanges:", outsideRanges);

  if (outsideRanges.length === 0) {
    console.log("‚úÖ C√°c ƒëi·ªÅu ki·ªán ƒë·∫ßu v√†o ƒë√£ bao ph·ªß to√†n b·ªô tr·ª•c s·ªë th·ª±c. Kh√¥ng c√≤n gi√° tr·ªã n√†o n·∫±m ngo√†i.");
    return false;
  }

  const result = outsideRanges.map((range) => rangeToConditionGroup(range, parameter));

  if (result.length === 0) {
    console.log("‚ö†Ô∏è C√°c kho·∫£ng n·∫±m ngo√†i kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi th√†nh ƒëi·ªÅu ki·ªán c·ª• th·ªÉ.");
    return false;
  }

  return result;
}
