import React, { Fragment, useMemo, useState } from "react";
import { formatCurrency } from "reborn-util";
import Modal, { ModalBody, ModalFooter, ModalHeader } from "components/modal/modal";
import LogoMB from "assets/images/logo-mb.png";
import QR from "assets/images/qr-mb.png";
import { IActionModal } from "model/OtherModel";
import FileUpload from "components/fileUpload/fileUpload";
import PackageService from "services/PackageService";
import { showToast } from "utils/common";

interface IShowModalPaymentProps {
  onShow: boolean;
  onHide: () => void;
  phone: string;
  data: any;
  dataResponse?: any;
}

export default function ShowModalPayment(props: IShowModalPaymentProps) {
  const { onShow, onHide, data, phone, dataResponse } = props;

  const [isSubmit, setIsSubmit] = useState<boolean>(false);
  const [formData, setFormData] = useState({
    values: {
      avatar: "",
    },
  });

  const onSubmit = async (e) => {
    e.preventDefault();

    setIsSubmit(true);

    const body = {
      id: dataResponse?.id,
      bill: formData?.values.avatar,
    };

    const response = await PackageService.updateBill(body);

    if (response.code === 0) {
      showToast(
        "G√≥i b·∫°n ƒëƒÉng k√Ω ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng. B√¢y gi·ªù, g√≥i b·∫°n ƒëƒÉng k√Ω ƒëang ƒë∆∞·ª£c ch·ªù x√°c nh·∫≠n t·ª´ ph√≠a b·ªô ph·∫≠n admin c·ªßa ch√∫ng t√¥i. Xin h√£y ki√™n nh·∫´n trong khi ch√∫ng t√¥i ki·ªÉm tra v√† x√°c nh·∫≠n th√¥ng tin c·ªßa b·∫°n!",
        "success"
      );
      handleClearForm();
    } else {
      showToast("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau!", "error");
    }

    setIsSubmit(false);
  };

  const handleClearForm = () => {
    onHide();
    setFormData({ values: { avatar: "" } });
  };

  const actions = useMemo<IActionModal>(
    () => ({
      actions_right: {
        buttons: [
          {
            title: "ƒê√≥ng",
            color: "primary",
            variant: "outline",
            disabled: isSubmit,
            callback: () => {
              handleClearForm();
            },
          },
          {
            title: "X√°c nh·∫≠n",
            color: "primary",
            type: "submit",
            disabled: isSubmit || !formData?.values?.avatar,
            is_loading: isSubmit,
          },
        ],
      },
    }),
    [formData, isSubmit]
  );

  return (
    <Fragment>
      <Modal isFade={true} isOpen={onShow} isCentered={true} staticBackdrop={true} toggle={() => handleClearForm()} className="modal-payment-package">
        <form className="wrapper-payment-package" onSubmit={(e) => onSubmit(e)}>
          <ModalHeader title="H∆∞·ªõng d·∫´n thanh to√°n" toggle={() => handleClearForm()} />
          <ModalBody>
            <div className="info__payment--user">
              <div className="money__payment">
                Qu√Ω kh√°ch c·∫ßn thanh to√°n {data?.price ? formatCurrency(data.price) : "0ƒë"} cho {data?.nameOrg?.toLowerCase()} v·ªõi l·ª±a ch·ªçn{" "}
                {data?.packageType == 5 ? `${data?.account || 0} t√†i kho·∫£n v√† ${data?.branch || 0} chi nh√°nh` : `${data?.name}/${data?.extend}`}.
              </div>
              <div className="step-item step-item--one">
                <div className="name-step">
                  <span className="hight-line">1</span>
                  Qu√Ω kh√°ch h√†ng c·∫ßn chuy·ªÉn ti·ªÅn v√†o t√†i kho·∫£n sau:
                </div>
                <div className="info-step info-step--one">
                  <div className="info-step--left">
                    {/* <div className="logo-msb">
                      <img src={LogoMB} alt="logo-msb" />
                    </div> */}
                    <div className="qr-code">
                      <img src={QR} alt="logo-msb" />
                    </div>
                  </div>
                  <div className="info-step--right">
                    <div className="user-receive logo-bank">
                      <img src={LogoMB} alt="logo-mb" />
                    </div>
                    <div className="user-receive">
                      <strong>Ch·ªß t√†i kho·∫£n:</strong> REBORN JSC.
                    </div>
                    <div className="user-receive">
                      <strong>S·ªë t√†i kho·∫£n:</strong> 3536899899.
                    </div>
                    <div className="user-receive">
                      <strong>Ng√¢n h√†ng:</strong> Ng√¢n h√†ng Th∆∞∆°ng m·∫°i C·ªï ph·∫ßn Qu√¢n ƒë·ªôi (MBBank).
                    </div>
                  </div>
                </div>
              </div>
              <div className="step-item step-item--two">
                <div className="name-step">
                  <span className="hight-line">2</span>
                  Sau khi ch·ªçn xong t√†i kho·∫£n, qu√Ω kh√°ch h√†ng c·∫ßn so·∫°n n·ªôi dung chuy·ªÉn kho·∫£n nh∆∞ sau:
                </div>
                <div className="info-step info-step--two">
                  <div className="info-step--content">
                    <span>
                      üëâN·ªôi dung: {data?.name?.toLowerCase()} {phone}
                    </span>
                  </div>
                </div>
              </div>
              <div className="step-item step-item--three">
                <div className="name-step">
                  <span className="hight-line">3</span>
                  L∆∞u √Ω:
                </div>
                <div className="info-step info-step-three">
                  <div className="info-step--note">Sau khi thanh to√°n th√†nh c√¥ng qu√Ω kh√°ch h√†ng vui l√≤ng ch·ª•p ·∫£nh bi√™n lai chuy·ªÉn ti·ªÅn t·∫°i ƒë√¢y.</div>
                  <div className="update__money-bill">
                    <FileUpload type="avatar" formData={formData} setFormData={setFormData} name="avatar" />
                  </div>
                </div>
              </div>
            </div>
          </ModalBody>
          <ModalFooter actions={actions} />
        </form>
      </Modal>
    </Fragment>
  );
}
